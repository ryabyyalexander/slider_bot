
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from data import del_msg, admins
from filters import IsAdmin
from sql import data_base

router = Router()


@router.message(Command("myphotos"))
async def handle_my_photos(message: Message):
    photos = data_base.execute_query(
        "SELECT id, file_id FROM photos WHERE added_by = ?",
        (message.from_user.id,)
    ).fetchall()

    if not photos:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ñ–æ—Ç–æ.")
        return

    for photo in photos:
        await message.answer_photo(
            photo[1],  # file_id
            caption=f"ID: {photo[0]}"  # id —Ñ–æ—Ç–æ
        )

    await message.delete()


@router.message(Command("del"), IsAdmin(admins))
async def handle_delete_photo(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Å ID —Ñ–æ—Ç–æ
        if len(message.text.split()) < 2:
            msg = await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /del <ID>")
            await del_msg(msg, 2)
            return

        photo_id = int(message.text.split()[1])
        # print(f'–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Å ID: {photo_id}')   –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ID

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        photo_exists = data_base.execute_query(
            "SELECT 1 FROM photos WHERE id = ?",
            (photo_id,)
        ).fetchone()

        if not photo_exists:
            msg = await message.answer(f"‚ùå –§–æ—Ç–æ –∑ ID {photo_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await del_msg(msg, 2)
            return

        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        deleted = data_base.delete_photo(photo_id)
        # print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {deleted}')   –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if deleted:
            msg = await message.answer(f"‚úÖ –§–æ—Ç–æ {photo_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            msg = await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ {photo_id}.")

        await del_msg(msg, 2)
        await message.delete()

    except ValueError:
        msg = await message.answer("‚ùå ID —Ñ–æ—Ç–æ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        await del_msg(msg, 2)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}')  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        msg = await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        await del_msg(msg, 2)


@router.message(Command("photostats"))
async def handle_photo_stats(message: Message):
    count = data_base.get_photo_count()
    msg = await message.answer(f"üìä –£ –±–∞–∑—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è {count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.")
    await del_msg(msg, 5)
    await message.delete()


@router.message(F.photo, IsAdmin(admins))
async def handle_any_photo(message: Message):
    photo_id = message.photo[-1].file_id
    caption = message.caption

    try:
        data_base.add_photo(photo_id, message.from_user.id, caption)
        msg = await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏!")
        await del_msg(msg, 2)
        await message.delete()
    except Exception as e:
        msg = await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")
        await del_msg(msg, 2)
